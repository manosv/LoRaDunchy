function Decoder(bytes, port) {
  // Decode an uplink message from a buffer
  // (array) of bytes to an object of fields.
  var decoded = {};
  var i = 0;
  var x;
  
  /*
  
  from sensors.h ...
  
typedef struct
{
	uint16_t pm2_5;		// PM 2.5 
	uint16_t pm10;		// PM 10
	int16_t tmp75_T;	// Temperature from TMP75 in 1/100 deg. C
	int16_t si7013_T; // Temperature from SI7013 in 1/100 deg. C
	int16_t sht31_T;	// Temperature from SHT31 in 1/100 deg. C
	int16_t bme280_T;	// Temperature from BME280 in 1/100 deg. C
	uint8_t si7013_RH;// Relative humidity from SI7013 in %RH
	uint8_t sht31_RH;	// Relative humidity from SHT31 in %RH
	uint8_t bme280_RH;// Relative humidity from BME280 in %RH
	uint16_t bme280_p;// Pressure from BME280, units 0,1 hPa
	uint16_t battery; // Current battery RSOC in mAh
	 int8_t current; 	// Battery current in mA (+ charging, - discharging)
	uint8_t voltage;  // Battery voltage value = 100 * (Ubat[V] - 2,5V)
} sen_readout_t;
*/

   if (port === 2) 
   {
     x = bytes[i++] << 8 | bytes[i++];  decoded.pm2_5 = x ;
     x = bytes[i++] << 8 | bytes[i++];  decoded.pm10 = x ;
     x = bytes[i++] << 8 | bytes[i++];  decoded.tmp75_T = x/100 ;
     x = bytes[i++] << 8 | bytes[i++];  decoded.si7013_T = x/100 ;
     x = bytes[i++] << 8 | bytes[i++];  decoded.sht31_T = x/ 100;
     x = bytes[i++] << 8 | bytes[i++];  decoded.bme280_T = x/100 ;
     x =  bytes[i++];  decoded.si7013_RH = x ;
     x =  bytes[i++];  decoded.sht31_RH = x ;
     x =  bytes[i++];  decoded.bme280_RH = x ;
     x = bytes[i++] << 8 | bytes[i++];  decoded.bme280_p = x ;
     x = bytes[i++] << 8 | bytes[i++];  decoded.battery = x ;
     x =  bytes[i++];  decoded.current = x ;
     x =  bytes[i++];  decoded.voltage = x ;	 
    }

  return decoded;
}